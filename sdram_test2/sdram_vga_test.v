
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module sdram_vga_test(

	//////////// CLOCK //////////
	input 		          		MAX10_CLK1_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS
);   

wire iclk_50;
reg  iclk_25 = 0;

wire read_request;
wire read_address;
wire read_data;
wire read_ack;

wire write_request;
wire write_address;
wire write_data;
wire write_ack;

wire vga_current_x;
wire vga_current_y;
wire vga_active_d;
wire vga_red;
wire vga_green;
wire vga_blue;

wire gen_current_x;
wire gen_current_y;
wire gen_active_d;
wire gen_red;
wire gen_green;
wire gen_blue;

assign iclk_50 = MAX10_CLK1_50;

always @(posedge MAX10_CLK1_50)
    iclk_25 <= ~iclk_25;

gen_controller gen_controller(
    .i_clk_25(iclk_25),    
    .o_red(gen_red),
    .o_green(gen_green),
    .o_blue(gen_blue),
    .o_current_x(gen_current_x),
    .o_current_y(gen_current_y),
    .o_active_d(gen_active_d)
);  
    
gen_sdram_adapter gen_sdram_adapter(
    .iclk_50(iclk_50),
    .oreq(write_request),
    .oaddress(write_address),
    .odata(write_data),
    .iack(write_ack),
    .i_current_x(gen_current_x),
    .i_current_y(gen_current_y),
    .i_active_d(gen_active_d),
    .i_red(gen_red),
    .i_green(gen_green),
    .i_blue(gen_blue)
);
    
vga_controller vga_controller(
    .i_clk_25(iclk_25),
    .i_red(vga_red),
    .i_green(vga_green),
    .i_blue(vga_blue),    
    .o_current_x(vga_current_x),
    .o_current_y(vga_current_y),
    .o_active_d(vga_active_d),
    .oVGA_HS(VGA_HS),
    .oVGA_VS(VGA_VS),
    .oVGA_R(VGA_R),
    .oVGA_G(VGA_G),
    .oVGA_B(VGA_B)
);

vga_sdram_adapter vga_sdram_adapter(
    .iclk_50(iclk_50),
    .oread_req(read_request),
    .oread_address(read_address),
    .iread_data(read_data),
    .iread_ack(read_ack),
    .i_current_x(vga_current_x),
    .i_current_y(vga_current_y),
    .i_active_d(vga_active_d),
    .o_red(vga_red),
    .o_green(vga_green),
    .o_blue(vga_blue)
);

sdram_controller sdram_controller(
	.iclk(iclk_50),
    
    .iwrite_req(write_request),
    .iwrite_address(write_address),
    .iwrite_data(write_data),
    .owrite_ack(write_ack),  
    
    .iread_req(read_request),
    .iread_address(read_address),
    .oread_data(read_data),
    .oread_ack(read_ack),
    
	.DRAM_ADDR(DRAM_ADDR),
    .DRAM_BA(DRAM_BA),
    .DRAM_CAS_N(DRAM_CAS_N),
    .DRAM_CKE(DRAM_CKE),
    .DRAM_CLK(DRAM_CLK),
    .DRAM_CS_N(DRAM_CS_N),
    .DRAM_DQ(DRAM_DQ),
    .DRAM_LDQM(DRAM_LDQM),
    .DRAM_RAS_N(DRAM_RAS_N),
    .DRAM_UDQM(DRAM_UDQM),
    .DRAM_WE_N(DRAM_WE_N)
);

endmodule
